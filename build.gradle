buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.1.+') {
            changing = true
        }
    }
}

plugins {
	id "com.jfrog.bintray" version "1.4"
}

buildDir = "build-${mc_version}"

apply plugin: 'forge'

group = "org.squiddev"
archivesBaseName = "CCTweaks"
version = mc_version + "-" + mod_version

apply from: 'gradle/scripts/dependencies.gradle'
apply from: 'gradle/scripts/artifacts.gradle'
//apply from: 'gradle/scripts/upload.gradle'
//apply from: 'gradle/scripts/documentation.gradle'

minecraft {
	version = project.mc_version + "-" + project.forge_version 
	runDir = "run-${project.mc_version}"

	replace '${mod_version}', project.mod_version
	replace '${mc_version}', project.mc_version
	replace '${cc_version}', project.cc_version
}

jar {
	manifest {
		attributes(
			'FMLCorePlugin': 'org.squiddev.cctweaks.core.asm.TweaksLoadingPlugin',
			'FMLCorePluginContainsFMLMod': 'true',
			'FMLAT': 'CCTweaks_at.cfg',
		)
	}

	// Package all the org.squiddev dependencies into one file
	from configurations.shade
		.findAll { it.getAbsolutePath().contains("org.squiddev") || it.getAbsolutePath().contains("cctweaks-lua") }
		.collect { it.isDirectory() ? it : zipTree(it) }


	exclude("assets/**/docs")
}

sourceSets {
	main {
		java {
			srcDirs += 'src/api/java'
		}
	}
}

processResources {
	// Définir une stratégie pour gérer les doublons dans les ressources

    duplicatesStrategy = 'warn' // Vous pouvez choisir parmi 'warn', 'exclude', 'fail', ou 'include'

	// this will ensure that this task is redone when the versions change.
	inputs.property "mod_version", project.mod_version
	inputs.property "mc_version", project.mc_version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// Replace mod_version and mc_version
		expand 'mod_version': mod_version, 'mc_version': mc_version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

test {
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}
}

gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint"
	}
}

task copyDependencies(type: Copy) {
  from configurations.default
  into 'dependencies'
}
